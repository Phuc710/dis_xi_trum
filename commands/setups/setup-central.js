const { SlashCommandBuilder, PermissionFlagsBits, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ChannelType } = require('discord.js');
const { centralMusicCollection } = require('../../mongodb');
const { createStatusIconAttachments, getStatusIconUrls } = require('../../utils/statusIcons');
const checkPermissions = require('../../utils/checkPermissions');
const phucx = require('../../phucx');

const COMMAND_SECURITY_TOKEN = phucx.SECURITY_TOKEN || 'DEFAULT_TOKEN';
const statusIconUrls = getStatusIconUrls();

module.exports = {
    data: new SlashCommandBuilder()
        .setName('setup-central')
        .setDescription('Thi·∫øt l·∫≠p h·ªá th·ªëng nh·∫°c t·∫≠p trung - g√µ t√™n b√†i h√°t l√† bot ph√°t nh·∫°c')
        .setDefaultMemberPermissions(PermissionFlagsBits.ManageChannels)
        .addChannelOption(option =>
            option.setName('voice-channel')
                .setDescription('Voice channel ƒë·ªÉ ph√°t nh·∫°c')
                .setRequired(true)
                .addChannelTypes(ChannelType.GuildVoice))
        .addIntegerOption(option =>
            option.setName('volume')
                .setDescription('√Çm l∆∞·ª£ng m·∫∑c ƒë·ªãnh (1-100)')
                .setRequired(false)
                .setMinValue(1)
                .setMaxValue(100))
        .addRoleOption(option =>
            option.setName('allowed-role')
                .setDescription('Role ƒë∆∞·ª£c quy·ªÅn s·ª≠ d·ª•ng (ƒë·ªÉ tr·ªëng cho @everyone)')
                .setRequired(false)),

    async execute(interaction, client) {
        
        try {
            const guild = interaction.guild;
            const serverId = guild.id;
            const channelId = interaction.channel.id;
            const voiceChannel = interaction.options.getChannel('voice-channel');
            const volume = interaction.options.getInteger('volume') || 50;
            const allowedRole = interaction.options.getRole('allowed-role');

            // Check if user has manage channels permission
            if (!interaction.member.permissions.has(PermissionFlagsBits.ManageChannels)) {
                const embed = new EmbedBuilder()
                    .setColor('#ff0000')
                    .setDescription('‚ùå B·∫°n c·∫ßn quy·ªÅn **Manage Channels** ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.')
                    .setFooter({ text: 'Permission required', iconURL: statusIconUrls.wrong });
                return interaction.reply({
                    embeds: [embed],
                    files: createStatusIconAttachments(['wrong']),
                    flags: 64
                });
            }

            try {
                // Create the central music panel embed
                const centralEmbed = new EmbedBuilder()
                    .setAuthor({ 
                        name: 'üéµ Boo Music Control Center', 
                        iconURL: 'https://cdn.discordapp.com/emojis/896724352949706762.gif',
                        url: 'https://discord.gg/cc9U4w6a' 
                    })
                    .setDescription([
                        '',
                        'üéµ **H·ªá th·ªëng nh·∫°c t·∫≠p trung**',
                        '',
                        `üé§ **Voice Channel:** ${voiceChannel}`,
                        `üîä **√Çm l∆∞·ª£ng m·∫∑c ƒë·ªãnh:** ${volume}%`,
                        `üë• **Role ƒë∆∞·ª£c ph√©p:** ${allowedRole ? allowedRole : '@everyone'}`,
                        '',
                        'üí° **C√°ch s·ª≠ d·ª•ng:**',
                        '‚Ä¢ G√µ **t√™n b√†i h√°t** ho·∫∑c **link YouTube**',
                        '‚Ä¢ Bot s·∫Ω t·ª± ƒë·ªông ph√°t nh·∫°c ngay l·∫≠p t·ª©c',
                        '‚Ä¢ ‚úÖ **Reaction xanh** = Ph√°t th√†nh c√¥ng',
                        '‚Ä¢ ‚ùå **Reaction ƒë·ªè** = C√≥ l·ªói',
                        '‚Ä¢ Th√¥ng b√°o th√¥ng minh v·ªÅ b√†i h√°t ti·∫øp theo',
                        '‚Ä¢ **Kh√¥ng x√≥a** tin nh·∫Øn c·ªßa b·∫°n n·ªØa!',
                        '',
                        '‚ú® *S·∫µn s√†ng l·∫•p ƒë·∫ßy n∆°i n√†y v·ªõi √¢m nh·∫°c tuy·ªát v·ªùi ch∆∞a?*'
                    ].join('\n'))
                    .setColor('#00c3ff')
                    .setFooter({ text: 'PHUCX Music Bot - Central System', iconURL: interaction.client.user.displayAvatarURL() })
                    .setTimestamp();

                // Create control buttons
                const row1 = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId('central_play_pause')
                            .setLabel('Play/Pause')
                            .setEmoji('‚èØÔ∏è')
                            .setStyle(ButtonStyle.Primary),
                        new ButtonBuilder()
                            .setCustomId('central_skip')
                            .setLabel('Skip')
                            .setEmoji('‚è≠Ô∏è')
                            .setStyle(ButtonStyle.Primary),
                        new ButtonBuilder()
                            .setCustomId('central_stop')
                            .setLabel('Stop')
                            .setEmoji('‚èπÔ∏è')
                            .setStyle(ButtonStyle.Danger),
                        new ButtonBuilder()
                            .setCustomId('central_queue')
                            .setLabel('Queue')
                            .setEmoji('üìÉ')
                            .setStyle(ButtonStyle.Secondary),
                        new ButtonBuilder()
                            .setCustomId('central_shuffle')
                            .setLabel('Shuffle')
                            .setEmoji('üîÄ')
                            .setStyle(ButtonStyle.Secondary)
                    );

                const row2 = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder()
                            .setCustomId('central_volume_down')
                            .setLabel('Vol-')
                            .setEmoji('üîâ')
                            .setStyle(ButtonStyle.Secondary),
                        new ButtonBuilder()
                            .setCustomId('central_volume_up')
                            .setLabel('Vol+')
                            .setEmoji('üîä')
                            .setStyle(ButtonStyle.Secondary),
                        new ButtonBuilder()
                            .setCustomId('central_loop')
                            .setLabel('Loop')
                            .setEmoji('üîÅ')
                            .setStyle(ButtonStyle.Secondary),
                        new ButtonBuilder()
                            .setCustomId('central_disconnect')
                            .setLabel('Disconnect')
                            .setEmoji('üö™')
                            .setStyle(ButtonStyle.Danger),
                        new ButtonBuilder()
                            .setCustomId('central_nowplaying')
                            .setLabel('Now Playing')
                            .setEmoji('üé∂')
                            .setStyle(ButtonStyle.Success)
                    );

                // Send the central panel
                const centralMessage = await interaction.reply({
                    embeds: [centralEmbed],
                    components: [row1, row2],
                    fetchReply: true
                });

                // Save configuration to database
                await centralMusicCollection.updateOne(
                    { serverId: serverId },
                    {
                        $set: {
                            serverId: serverId,
                            channelId: channelId,
                            messageId: centralMessage.id,
                            voiceChannelId: voiceChannel.id,
                            defaultVolume: volume,
                            allowedRoleId: allowedRole?.id || null,
                            status: true,
                            createdAt: new Date(),
                            ownerId: guild.ownerId
                        }
                    },
                    { upsert: true }
                );

                // Send success message
                const successEmbed = new EmbedBuilder()
                    .setTitle('üéµ H·ªá Th·ªëng Nh·∫°c T·∫≠p Trung ƒê√£ S·∫µn S√†ng!')
                    .setDescription(
                        `**H·ªá th·ªëng nh·∫°c t·∫≠p trung ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p!**\n\n` +
                        `üéØ **C√°ch s·ª≠ d·ª•ng:**\n` +
                        `‚Ä¢ G√µ t√™n b√†i h√°t ho·∫∑c link YouTube\n` +
                        `‚Ä¢ Bot s·∫Ω t·ª± ƒë·ªông ph√°t nh·∫°c\n` +
                        `‚Ä¢ ‚úÖ Reaction xanh = Ph√°t th√†nh c√¥ng\n` +
                        `‚Ä¢ ‚ùå Reaction ƒë·ªè = L·ªói\n` +
                        `‚Ä¢ Th√¥ng b√°o th√¥ng minh v·ªÅ b√†i h√°t ti·∫øp theo\n` +
                        `‚Ä¢ Kh√¥ng x√≥a tin nh·∫Øn c·ªßa b·∫°n n·ªØa!\n\n` +
                        `üéµ **Voice Channel:** ${voiceChannel}\n` +
                        `üîä **√Çm l∆∞·ª£ng:** ${volume}%\n` +
                        `üë• **Role ƒë∆∞·ª£c ph√©p:** ${allowedRole ? allowedRole : '@everyone'}\n` +
                        `üìç **Control Panel:** ·ªû tr√™n tin nh·∫Øn n√†y`
                    )
                    .setColor('#00ff00')
                    .setFooter({ text: 'H·ªá th·ªëng ƒë√£ ho·∫°t ƒë·ªông', iconURL: statusIconUrls.tick });

                await interaction.followUp({
                    embeds: [successEmbed],
                    files: createStatusIconAttachments(['tick']),
                    flags: 64
                });

            } catch (innerError) {
                console.error('Error setting up central music system:', innerError);
                const errorEmbed = new EmbedBuilder()
                    .setColor('#ff0000')
                    .setDescription('‚ùå An error occurred while setting up the central music system. Please try again.')
                    .setFooter({ text: 'Action failed', iconURL: statusIconUrls.wrong });

                const errorPayload = {
                    embeds: [errorEmbed],
                    files: createStatusIconAttachments(['wrong']),
                    flags: 64
                };

                if (!interaction.replied) {
                    await interaction.reply(errorPayload);
                } else {
                    await interaction.followUp(errorPayload);
                }
            }
        } catch (error) {
            console.error('General error in setup-central command:', error);
            const errorEmbed = new EmbedBuilder()
                .setColor('#ff0000')
                .setDescription('‚ùå An unexpected error occurred. Please try again later.')
                .setFooter({ text: 'Action failed', iconURL: statusIconUrls.wrong });

            const errorPayload = {
                embeds: [errorEmbed],
                files: createStatusIconAttachments(['wrong']),
                flags: 64
            };
            
            if (!interaction.replied) {
                await interaction.reply(errorPayload);
            } else {
                await interaction.followUp(errorPayload);
            }
        }
    }
};
