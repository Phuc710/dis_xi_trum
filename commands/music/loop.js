// loop.js - Fixed and beautified
const { QueueRepeatMode, useQueue } = require('discord-player');
const { ApplicationCommandOptionType, EmbedBuilder } = require('discord.js');
const { Translate } = require('../../process_tools');

module.exports = {
    name: 'loop',
    description: 'B·∫≠t / t·∫Øt ch·∫ø ƒë·ªô l·∫∑p l·∫°i b√†i h√°t ho·∫∑c c·∫£ h√†ng ch·ªù',
    voiceChannel: true,
    options: [
        {
            name: 'action',
            description: 'Ch·ªçn ch·∫ø ƒë·ªô l·∫∑p b·∫°n mu·ªën',
            type: ApplicationCommandOptionType.String,
            required: true,
            choices: [
                { name: 'üîÅ L·∫∑p Queue', value: 'enable_loop_queue' },
                { name: 'üîÇ L·∫∑p B√†i H√°t', value: 'enable_loop_song' },
                { name: 'üéµ Autoplay', value: 'enable_autoplay' },
                { name: 'üî¥ T·∫Øt Loop', value: 'disable_loop' },
            ],
        }
    ],

    async execute({ inter }) {
        const queue = useQueue(inter.guild);

        // ‚ùå Kh√¥ng c√≥ nh·∫°c
        if (!queue?.isPlaying()) {
            const embed = new EmbedBuilder()
                .setColor('#ff4d4d')
                .setTitle("‚ùå Kh√¥ng c√≥ nh·∫°c")
                .setDescription(await Translate(`Hi·ªán t·∫°i kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t, ${inter.member}.`));
            return inter.editReply({ embeds: [embed] });
        }

        const action = inter.options.getString('action');
        const embed = new EmbedBuilder().setColor('#2f3136');

        switch (action) {
            case 'enable_loop_queue': {
                if (queue.repeatMode === QueueRepeatMode.TRACK) {
                    return inter.editReply({ 
                        content: await Translate(`B·∫°n ph·∫£i t·∫Øt ch·∫ø ƒë·ªô l·∫∑p b√†i h√°t tr∆∞·ªõc (/loop disable) ‚ùå`) 
                    });
                }
                queue.setRepeatMode(QueueRepeatMode.QUEUE);
                embed.setTitle("üîÅ Loop Queue B·∫≠t")
                     .setDescription(await Translate("To√†n b·ªô queue s·∫Ω ph√°t l·∫∑p l·∫°i li√™n t·ª•c."));
                break;
            }
            case 'enable_loop_song': {
                if (queue.repeatMode === QueueRepeatMode.QUEUE) {
                    return inter.editReply({ 
                        content: await Translate(`B·∫°n ph·∫£i t·∫Øt ch·∫ø ƒë·ªô l·∫∑p queue tr∆∞·ªõc (/loop disable) ‚ùå`) 
                    });
                }
                queue.setRepeatMode(QueueRepeatMode.TRACK);
                embed.setTitle("üîÇ Loop B√†i H√°t B·∫≠t")
                     .setDescription(await Translate(`B√†i h√°t hi·ªán t·∫°i s·∫Ω ph√°t l·∫∑p l·∫°i li√™n t·ª•c.`));
                break;
            }
            case 'enable_autoplay': {
                queue.setRepeatMode(QueueRepeatMode.AUTOPLAY);
                embed.setTitle("üéµ Autoplay B·∫≠t")
                     .setDescription(await Translate("Bot s·∫Ω t·ª± ƒë·ªông ph√°t th√™m nh·∫°c li√™n quan sau khi queue k·∫øt th√∫c."));
                break;
            }
            case 'disable_loop': {
                if (queue.repeatMode === QueueRepeatMode.OFF) {
                    return inter.editReply({ 
                        content: await Translate(`Loop hi·ªán t·∫°i ƒë√£ t·∫Øt ‚ùå`) 
                    });
                }
                queue.setRepeatMode(QueueRepeatMode.OFF);
                embed.setTitle("üî¥ Loop T·∫Øt")
                     .setDescription(await Translate("Kh√¥ng c√≤n ch·∫ø ƒë·ªô l·∫∑p n√†o ƒë∆∞·ª£c b·∫≠t."));
                break;
            }
        }

        return inter.editReply({ embeds: [embed] });
    }
};
