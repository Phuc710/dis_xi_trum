const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const musicIcons = require('../../UI/icons/musicicons');
const axios = require('axios');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('lyrics')
        .setDescription('Hi·ªÉn th·ªã l·ªùi b√†i h√°t ƒëang ph√°t ho·∫∑c t√¨m l·ªùi b√†i h√°t')
        .addStringOption(option =>
            option.setName('query')
                .setDescription('T√™n b√†i h√°t ƒë·ªÉ t√¨m l·ªùi (ƒë·ªÉ tr·ªëng ƒë·ªÉ l·∫•y b√†i ƒëang ph√°t)')
                .setRequired(false)),

    async execute(interaction) {
        try {
            await interaction.deferReply();
            const client = interaction.client;
            const guildId = interaction.guild.id;
            const query = interaction.options.getString('query');

            // Ki·ªÉm tra player c√≥ t·ªìn t·∫°i kh√¥ng
            const player = client.riffy?.players?.get(guildId);
            
            let trackName, artistName, duration;

            if (query) {
                // N·∫øu c√≥ query, t√¨m l·ªùi b√†i h√°t theo t√™n
                const parts = query.split(' - ');
                if (parts.length >= 2) {
                    artistName = parts[0].trim();
                    trackName = parts.slice(1).join(' - ').trim();
                } else {
                    trackName = query.trim();
                    artistName = '';
                }
                duration = 0; // Kh√¥ng c√≥ th·ªùi l∆∞·ª£ng cho t√¨m ki·∫øm th·ªß c√¥ng
            } else {
                // N·∫øu kh√¥ng c√≥ query, l·∫•y b√†i ƒëang ph√°t
                if (!player || !player.current || !player.current.info) {
                    const errorEmbed = new EmbedBuilder()
                        .setColor('#FF0000')
                        .setTitle('‚ùå Kh√¥ng C√≥ B√†i H√°t ƒêang Ph√°t')
                        .setDescription('Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t.\nS·ª≠ d·ª•ng `/play` ƒë·ªÉ ph√°t nh·∫°c ho·∫∑c nh·∫≠p t√™n b√†i h√°t v√†o option `query`.')
                        .setFooter({ text: 'PHUCX Music Bot', iconURL: musicIcons.alertIcon });
                
                    const reply = await interaction.editReply({ embeds: [errorEmbed] });
                    setTimeout(() => reply.delete().catch(() => {}), 5000);
                    return;
                }
                
                trackName = player.current.info.title;
                artistName = player.current.info.author;
                duration = Math.floor(player.current.info.length / 1000);
            }

            // L·∫•y l·ªùi b√†i h√°t
            const lyrics = await this.getLyrics(trackName, artistName, duration);
            
            if (!lyrics) {
                const errorEmbed = new EmbedBuilder()
                    .setColor('#FF0000')
                    .setTitle('‚ùå Kh√¥ng T√¨m Th·∫•y L·ªùi B√†i H√°t')
                    .setDescription(`Kh√¥ng th·ªÉ t√¨m th·∫•y l·ªùi b√†i h√°t cho: **${trackName}**${artistName ? ` - ${artistName}` : ''}\n\n**M·∫πo:**\n- Th·ª≠ nh·∫≠p t√™n b√†i h√°t ch√≠nh x√°c h∆°n\n- Bao g·ªìm t√™n ngh·ªá sƒ©\n- Ki·ªÉm tra ch√≠nh t·∫£`)
                    .setFooter({ text: 'PHUCX Music Bot', iconURL: musicIcons.alertIcon });
                
                const reply = await interaction.editReply({ embeds: [errorEmbed] });
                setTimeout(() => reply.delete().catch(() => {}), 8000);
                return;
            }

            const lines = lyrics.split('\n').map(line => line.trim()).filter(Boolean);
            
            // T·∫°o embed v·ªõi l·ªùi b√†i h√°t - design m·ªõi
            const lyricsEmojis = ['üéµ', 'üé∂', 'üéº', 'üé§', 'üé∏', 'üéπ'];
            const randomLyricsEmoji = lyricsEmojis[Math.floor(Math.random() * lyricsEmojis.length)];
            
            const embed = new EmbedBuilder()
                .setTitle(`${randomLyricsEmoji} Lyrics: ${trackName} üé≠`)
                .setDescription(artistName ? `üé§ **Artist:** \`${artistName}\`\nüéµ **Let's sing along!** üéµ` : 'üéµ **Ready to sing along!** üéµ')
                .setColor('#FF6B9D')
                .setFooter({ 
                    text: `üé§ Sing it loud! ‚Ä¢ Requested by ${interaction.user.username}`, 
                    iconURL: interaction.user.displayAvatarURL() 
                });

            // N·∫øu c√≥ player v√† ƒëang ph√°t b√†i n√†y, hi·ªÉn th·ªã live lyrics
            if (!query && player && player.current && player.current.info.title === trackName) {
                embed.setDescription(`**Ngh·ªá sƒ©:** ${artistName}\n\nüîÑ **Live Lyrics** - ƒêang ƒë·ªìng b·ªô v·ªõi b√†i h√°t...`);
                
                const stopButton = new ButtonBuilder()
                    .setCustomId("stopLyrics")
                    .setLabel("D·ª´ng Live Lyrics")
                    .setStyle(ButtonStyle.Danger);
                
                const fullButton = new ButtonBuilder()
                    .setCustomId("fullLyrics")
                    .setLabel("Xem To√†n B·ªô")
                    .setStyle(ButtonStyle.Primary);
                
                const row = new ActionRowBuilder().addComponents(fullButton, stopButton);
                
                const message = await interaction.editReply({ embeds: [embed], components: [row] });
                
                // B·∫Øt ƒë·∫ßu live lyrics
                this.startLiveLyrics(client, guildId, message, lines, player, trackName, artistName);
            } else {
                // Hi·ªÉn th·ªã to√†n b·ªô l·ªùi b√†i h√°t v·ªõi format ƒë·∫πp
                const formattedLyrics = this.formatLyricsForDisplay(lines);
                
                // Ki·ªÉm tra ƒë·ªô d√†i v√† chia nh·ªè n·∫øu c·∫ßn
                if (formattedLyrics.length > 4096) {
                    const chunks = this.chunkText(formattedLyrics, 4096);
                    embed.setDescription(`**Ngh·ªá sƒ©:** ${artistName}\n\n${chunks[0]}`);
                    
                    const deleteButton = new ButtonBuilder()
                        .setCustomId("deleteLyrics")
                        .setLabel("X√≥a")
                        .setStyle(ButtonStyle.Danger);
                    
                    const nextButton = new ButtonBuilder()
                        .setCustomId("nextLyrics")
                        .setLabel("Trang Ti·∫øp")
                        .setStyle(ButtonStyle.Primary);
                    
                    const row = new ActionRowBuilder().addComponents(nextButton, deleteButton);
                    
                    const message = await interaction.editReply({ embeds: [embed], components: [row] });
                    
                    // L∆∞u tr·ªØ chunks ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng
                    message.lyricsChunks = chunks;
                    message.currentChunk = 0;
                    message.artistName = artistName;
                    
                    this.setupLyricsNavigation(message);
                } else {
                    embed.setDescription(`**Ngh·ªá sƒ©:** ${artistName}\n\n${formattedLyrics}`);
                    
                    const deleteButton = new ButtonBuilder()
                        .setCustomId("deleteLyrics")
                        .setLabel("X√≥a")
                        .setStyle(ButtonStyle.Danger);
                    
                    const row = new ActionRowBuilder().addComponents(deleteButton);
                    
                    await interaction.editReply({ embeds: [embed], components: [row] });
                }
            }
        } catch (error) {
            console.error('Error in lyrics command:', error);
            const errorEmbed = new EmbedBuilder()
                .setColor('#FF0000')
                .setTitle('‚ùå ƒê√£ X·∫£y Ra L·ªói')
                .setDescription('C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh. Vui l√≤ng th·ª≠ l·∫°i sau.')
                .setFooter({ text: 'PHUCX Music Bot', iconURL: musicIcons.alertIcon });
            
            const reply = await interaction.editReply({ embeds: [errorEmbed] });
            setTimeout(() => reply.delete().catch(() => {}), 3000);
        }
    },

    async getLyrics(trackName, artistName, duration) {
        try {
            // L√†m s·∫°ch t√™n b√†i h√°t
            trackName = trackName
                .replace(/\b(Official|Audio|Video|Lyrics|Theme|Soundtrack|Music|Full Version|HD|4K|Visualizer|Radio Edit|Live|Remix|Mix|Extended|Cover|Parody|Performance|Version|Unplugged|Reupload)\b/gi, "") 
                .replace(/\s*[-_/|]\s*/g, " ") 
                .replace(/\s+/g, " ") 
                .trim();
    
            // L√†m s·∫°ch t√™n ngh·ªá sƒ©
            artistName = artistName
                .replace(/\b(Topic|VEVO|Records|Label|Productions|Entertainment|Ltd|Inc|Band|DJ|Composer|Performer)\b/gi, "")
                .replace(/ x /gi, " & ") 
                .replace(/\s+/g, " ") 
                .trim();
    
            // Th·ª≠ t√¨m v·ªõi th·ªùi l∆∞·ª£ng
            let response = await axios.get(`https://lrclib.net/api/get`, {
                params: { track_name: trackName, artist_name: artistName, duration },
                timeout: 5000 
            });
    
            if (response.data.syncedLyrics || response.data.plainLyrics) {
                return this.cleanLyrics(response.data.syncedLyrics || response.data.plainLyrics);
            }
    
            // Th·ª≠ t√¨m kh√¥ng c√≥ th·ªùi l∆∞·ª£ng
            response = await axios.get(`https://lrclib.net/api/get`, {
                params: { track_name: trackName, artist_name: artistName },
                timeout: 5000
            });
    
            return this.cleanLyrics(response.data.syncedLyrics || response.data.plainLyrics);
        } catch (error) {
            console.error("‚ùå Lyrics fetch error:", error.response?.data?.message || error.message);
            return null;
        }
    },

    cleanLyrics(lyrics) {
        if (!lyrics) return null;
        
        // Lo·∫°i b·ªè timestamps v√† l√†m s·∫°ch lyrics
        let cleanedLyrics = lyrics
            // Lo·∫°i b·ªè timestamps [mm:ss.xxx]
            .replace(/\[\d{2}:\d{2}\.\d{3}\]/g, '')
            // Lo·∫°i b·ªè timestamps [mm:ss]
            .replace(/\[\d{2}:\d{2}\]/g, '')
            // Lo·∫°i b·ªè timestamps [m:ss]
            .replace(/\[\d{1,2}:\d{2}\]/g, '')
            // Lo·∫°i b·ªè timestamps [ss]
            .replace(/\[\d{1,2}\]/g, '')
            // Lo·∫°i b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát kh√°c
            .replace(/\[.*?\]/g, '')
            // Lo·∫°i b·ªè d√≤ng tr·ªëng th·ª´a
            .replace(/\n\s*\n\s*\n/g, '\n\n')
            // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a
            .replace(/^\s+|\s+$/gm, '')
            .trim();
        
        return cleanedLyrics;
    },

    formatLyricsForDisplay(lines) {
        if (!lines || lines.length === 0) return '';
        
        const formattedLines = lines.map((line, index) => {
            // B·ªè qua d√≤ng tr·ªëng
            if (!line.trim()) return '';
            
            const trimmedLine = line.trim();
            
            // Th√™m emoji cho c√°c d√≤ng ƒë·∫∑c bi·ªát v·ªõi animation
            let emoji = '';
            let prefix = '';
            
            if (trimmedLine.toLowerCase().includes('chorus') || trimmedLine.toLowerCase().includes('ƒëi·ªáp kh√∫c')) {
                emoji = 'üéµ ';
                prefix = '**[CHORUS]** ';
            } else if (trimmedLine.toLowerCase().includes('verse') || trimmedLine.toLowerCase().includes('kh·ªï')) {
                emoji = 'üé§ ';
                prefix = '**[VERSE]** ';
            } else if (trimmedLine.toLowerCase().includes('bridge') || trimmedLine.toLowerCase().includes('c·∫ßu')) {
                emoji = 'üåâ ';
                prefix = '**[BRIDGE]** ';
            } else if (trimmedLine.toLowerCase().includes('outro') || trimmedLine.toLowerCase().includes('k·∫øt')) {
                emoji = 'üé≠ ';
                prefix = '**[OUTRO]** ';
            } else if (trimmedLine.toLowerCase().includes('intro') || trimmedLine.toLowerCase().includes('m·ªü ƒë·∫ßu')) {
                emoji = 'üé™ ';
                prefix = '**[INTRO]** ';
            } else if (trimmedLine.length > 0) {
                // Animation emojis cho c√°c d√≤ng th∆∞·ªùng
                const emojis = ['üí´', '‚ú®', 'üåü', 'üíñ', 'üíù', 'üíï', 'üíó', 'üíò', 'üî•', '‚ö°', 'üéä', 'üéâ'];
                emoji = emojis[index % emojis.length] + ' ';
            }
            
            // Format v·ªõi blockquote, prefix v√† emoji
            const formattedLine = prefix ? `${prefix}${trimmedLine}` : trimmedLine;
            return `> ${emoji}${formattedLine}`;
        }).filter(line => line !== '');
        
        return formattedLines.join('\n');
    },

    startLiveLyrics(client, guildId, message, lines, player, trackName, artistName) {
        const lyricIntervals = client.lyricIntervals || new Map();
        client.lyricIntervals = lyricIntervals;
        
        // D·ªçn d·∫πp interval c≈© n·∫øu c√≥
        if (lyricIntervals.has(guildId)) {
            clearInterval(lyricIntervals.get(guildId));
            lyricIntervals.delete(guildId);
        }
        
        const songDuration = Math.floor(player.current.info.length / 1000);
        
        const updateLyrics = async () => {
            try {
                if (!client.riffy?.players?.has(guildId) || !player.current) {
                    if (lyricIntervals.has(guildId)) {
                        clearInterval(lyricIntervals.get(guildId));
                        lyricIntervals.delete(guildId);
                    }
                    return;
                }
                
                const currentTime = Math.floor(player.position / 1000);
                const totalLines = lines.length;
                
                const linesPerSecond = totalLines / songDuration;
                const currentLineIndex = Math.floor(currentTime * linesPerSecond);
                
                const start = Math.max(0, currentLineIndex - 3);
                const end = Math.min(totalLines, currentLineIndex + 4);
                const visibleLines = lines.slice(start, end).join('\n');
                
                const formattedVisibleLines = this.formatLyricsForDisplay(lines.slice(start, end));
                
                const embed = new EmbedBuilder()
                    .setTitle(`üéµ Live Lyrics: ${trackName}`)
                    .setDescription(`**Ngh·ªá sƒ©:** ${artistName}\n\n${formattedVisibleLines}`)
                    .setColor('#DC92FF');
                
                try {
                    const msg = await message.edit({ embeds: [embed] });
                } catch (err) {
                    if (lyricIntervals.has(guildId)) {
                        clearInterval(lyricIntervals.get(guildId));
                        lyricIntervals.delete(guildId);
                    }
                }
            } catch (err) {
                console.error("Error updating lyrics:", err);
                if (lyricIntervals.has(guildId)) {
                    clearInterval(lyricIntervals.get(guildId));
                    lyricIntervals.delete(guildId);
                }
            }
        };
        
        const interval = setInterval(updateLyrics, 3000);
        lyricIntervals.set(guildId, interval);
        
        updateLyrics();
        
        const collector = message.createMessageComponentCollector({ time: 600000 });
        
        collector.on('collect', async i => {
            await i.deferUpdate();
            
            if (i.customId === "stopLyrics") {
                if (lyricIntervals.has(guildId)) {
                    clearInterval(lyricIntervals.get(guildId));
                    lyricIntervals.delete(guildId);
                }
                await message.delete().catch(() => {});
            } else if (i.customId === "fullLyrics") {
                if (lyricIntervals.has(guildId)) {
                    clearInterval(lyricIntervals.get(guildId));
                    lyricIntervals.delete(guildId);
                }
                
                const formattedLyrics = this.formatLyricsForDisplay(lines);
                const embed = new EmbedBuilder()
                    .setTitle(`üéµ L·ªùi B√†i H√°t: ${trackName}`)
                    .setDescription(`**Ngh·ªá sƒ©:** ${artistName}\n\n${formattedLyrics}`)
                    .setColor('#DC92FF');
                
                const deleteButton = new ButtonBuilder()
                    .setCustomId("deleteLyrics")
                    .setLabel("X√≥a")
                    .setStyle(ButtonStyle.Danger);
                
                const deleteRow = new ActionRowBuilder().addComponents(deleteButton);
                
                await message.edit({ embeds: [embed], components: [deleteRow] });
            } else if (i.customId === "deleteLyrics") {
                await message.delete().catch(() => {});
            }
        });
        
        collector.on('end', () => {
            if (lyricIntervals.has(guildId)) {
                clearInterval(lyricIntervals.get(guildId));
                lyricIntervals.delete(guildId);
            }
            message.delete().catch(() => {});
        });
    },

    setupLyricsNavigation(message) {
        const collector = message.createMessageComponentCollector({ time: 300000 });
        
        collector.on('collect', async i => {
            await i.deferUpdate();
            
            if (i.customId === "nextLyrics") {
                message.currentChunk++;
                const chunks = message.lyricsChunks;
                
                if (message.currentChunk >= chunks.length) {
                    message.currentChunk = 0; // Quay v·ªÅ trang ƒë·∫ßu
                }
                
                const embed = new EmbedBuilder()
                    .setTitle(`üéµ L·ªùi B√†i H√°t (Trang ${message.currentChunk + 1}/${chunks.length})`)
                    .setDescription(`**Ngh·ªá sƒ©:** ${message.artistName}\n\n${chunks[message.currentChunk]}`)
                    .setColor('#DC92FF');
                
                const prevButton = new ButtonBuilder()
                    .setCustomId("prevLyrics")
                    .setLabel("Trang Tr∆∞·ªõc")
                    .setStyle(ButtonStyle.Secondary);
                
                const nextButton = new ButtonBuilder()
                    .setCustomId("nextLyrics")
                    .setLabel("Trang Ti·∫øp")
                    .setStyle(ButtonStyle.Primary);
                
                const deleteButton = new ButtonBuilder()
                    .setCustomId("deleteLyrics")
                    .setLabel("X√≥a")
                    .setStyle(ButtonStyle.Danger);
                
                const row = new ActionRowBuilder().addComponents(prevButton, nextButton, deleteButton);
                
                await message.edit({ embeds: [embed], components: [row] });
            } else if (i.customId === "prevLyrics") {
                message.currentChunk--;
                const chunks = message.lyricsChunks;
                
                if (message.currentChunk < 0) {
                    message.currentChunk = chunks.length - 1; // ƒêi ƒë·∫øn trang cu·ªëi
                }
                
                const embed = new EmbedBuilder()
                    .setTitle(`üéµ L·ªùi B√†i H√°t (Trang ${message.currentChunk + 1}/${chunks.length})`)
                    .setDescription(`**Ngh·ªá sƒ©:** ${message.artistName}\n\n${chunks[message.currentChunk]}`)
                    .setColor('#DC92FF');
                
                const prevButton = new ButtonBuilder()
                    .setCustomId("prevLyrics")
                    .setLabel("Trang Tr∆∞·ªõc")
                    .setStyle(ButtonStyle.Secondary);
                
                const nextButton = new ButtonBuilder()
                    .setCustomId("nextLyrics")
                    .setLabel("Trang Ti·∫øp")
                    .setStyle(ButtonStyle.Primary);
                
                const deleteButton = new ButtonBuilder()
                    .setCustomId("deleteLyrics")
                    .setLabel("X√≥a")
                    .setStyle(ButtonStyle.Danger);
                
                const row = new ActionRowBuilder().addComponents(prevButton, nextButton, deleteButton);
                
                await message.edit({ embeds: [embed], components: [row] });
            } else if (i.customId === "deleteLyrics") {
                await message.delete().catch(() => {});
            }
        });
    },

    chunkText(text, maxLength) {
        const chunks = [];
        const lines = text.split('\n');
        let currentChunk = '';
        
        for (const line of lines) {
            if (currentChunk.length + line.length + 1 > maxLength) {
                if (currentChunk) {
                    chunks.push(currentChunk.trim());
                    currentChunk = line;
                } else {
                    // N·∫øu m·ªôt d√≤ng qu√° d√†i, chia nh·ªè n√≥
                    chunks.push(line.substring(0, maxLength));
                    currentChunk = line.substring(maxLength);
                }
            } else {
                currentChunk += (currentChunk ? '\n' : '') + line;
            }
        }
        
        if (currentChunk) {
            chunks.push(currentChunk.trim());
        }
        
        return chunks;
    }
};
