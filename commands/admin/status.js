const { EmbedBuilder, SlashCommandBuilder, PermissionFlagsBits } = require('discord.js');
const colors = require('../../UI/colors/colors');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('status')
        .setDescription('Qu·∫£n l√Ω tr·∫°ng th√°i bot')
        .addSubcommand(subcommand =>
            subcommand
                .setName('server-count')
                .setDescription('C·∫≠p nh·∫≠t tr·∫°ng th√°i hi·ªÉn th·ªã s·ªë server'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('custom')
                .setDescription('ƒê·∫∑t tr·∫°ng th√°i t√πy ch·ªânh')
                .addStringOption(option =>
                    option.setName('activity')
                        .setDescription('Ho·∫°t ƒë·ªông hi·ªÉn th·ªã')
                        .setRequired(true))
                .addStringOption(option =>
                    option.setName('type')
                        .setDescription('Lo·∫°i ho·∫°t ƒë·ªông')
                        .setRequired(false)
                        .addChoices(
                            { name: 'Playing', value: 'Playing' },
                            { name: 'Listening', value: 'Listening' },
                            { name: 'Watching', value: 'Watching' },
                            { name: 'Competing', value: 'Competing' }
                        )))
        .addSubcommand(subcommand =>
            subcommand
                .setName('info')
                .setDescription('Xem th√¥ng tin tr·∫°ng th√°i hi·ªán t·∫°i'))
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    async execute(interaction, client) {
        const subcommand = interaction.options.getSubcommand();

        if (!client.statusManager) {
            return interaction.reply({
                content: '‚ùå StatusManager ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!',
                ephemeral: true
            });
        }

        try {
            switch (subcommand) {
                case 'server-count':
                    const serverCount = client.guilds.cache.size;
                    await client.statusManager.setServerCountStatus(serverCount);
                    
                    const serverEmbed = new EmbedBuilder()
                        .setTitle('‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng')
                        .setDescription(`ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i hi·ªÉn th·ªã s·ªë server: **${serverCount} servers**`)
                        .setColor('#00FF00')
                        .setTimestamp();
                    
                    await interaction.reply({ embeds: [serverEmbed], ephemeral: true });
                    break;

                case 'custom':
                    const activity = interaction.options.getString('activity');
                    const type = interaction.options.getString('type') || 'Playing';
                    
                    await client.statusManager.setCustomStatus(activity, type);
                    
                    const customEmbed = new EmbedBuilder()
                        .setTitle('‚úÖ Tr·∫°ng th√°i t√πy ch·ªânh ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t')
                        .addFields(
                            { name: 'Ho·∫°t ƒë·ªông', value: activity, inline: true },
                            { name: 'Lo·∫°i', value: type, inline: true }
                        )
                        .setColor('#FF6B6B')
                        .setTimestamp();
                    
                    await interaction.reply({ embeds: [customEmbed], ephemeral: true });
                    break;

                case 'info':
                    const isPlaying = client.statusManager.getIsPlaying();
                    const currentActivity = client.user.presence?.activities[0];
                    
                    const infoEmbed = new EmbedBuilder()
                        .setTitle('üìä Th√¥ng tin tr·∫°ng th√°i bot')
                        .addFields(
                            { name: 'üéµ ƒêang ph√°t nh·∫°c', value: isPlaying ? 'C√≥' : 'Kh√¥ng', inline: true },
                            { name: 'üî¢ S·ªë server', value: client.guilds.cache.size.toString(), inline: true },
                            { name: 'üë• S·ªë user', value: client.guilds.cache.reduce((a, g) => a + g.memberCount, 0).toString(), inline: true },
                            { name: 'üì∫ Tr·∫°ng th√°i hi·ªán t·∫°i', value: currentActivity ? `${currentActivity.name} (${currentActivity.type})` : 'Kh√¥ng c√≥', inline: false }
                        )
                        .setColor('#00C3FF')
                        .setThumbnail(client.user.displayAvatarURL())
                        .setTimestamp();
                    
                    await interaction.reply({ embeds: [infoEmbed], ephemeral: true });
                    break;
            }
        } catch (error) {
            console.error(`${colors.red}[ L·ªñI STATUS CMD ]${colors.reset}`, error);
            
            const errorEmbed = new EmbedBuilder()
                .setTitle('‚ùå L·ªói')
                .setDescription('ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán l·ªánh!')
                .setColor('#FF0000')
                .setTimestamp();
            
            if (interaction.replied || interaction.deferred) {
                await interaction.followUp({ embeds: [errorEmbed], ephemeral: true });
            } else {
                await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
            }
        }
    },
};