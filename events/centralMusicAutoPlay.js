const { EmbedBuilder } = require('discord.js');
const phucx = require('../phucx');
const musicIcons = require('../UI/icons/musicicons');
const { centralMusicCollection } = require('../mongodb');

module.exports = (client) => {
    client.on('messageCreate', async (message) => {
        try {
            // B·ªè qua bot messages v√† DM
            if (message.author.bot || !message.guild) return;

            const serverId = message.guild.id;
            const channelId = message.channel.id;

            // Ki·ªÉm tra xem channel n√†y c√≥ ƒë∆∞·ª£c setup central music kh√¥ng
            const config = await centralMusicCollection.findOne({ serverId: serverId });
            if (!config || !config.status || config.channelId !== channelId) return;
            
            // Ki·ªÉm tra permissions n·∫øu c√≥ allowed role
            if (config.allowedRoleId) {
                if (!message.member.roles.cache.has(config.allowedRoleId)) {
                    return;
                }
            }

            // Ki·ªÉm tra xem tin nh·∫Øn c√≥ ph·∫£i l√† music request kh√¥ng
            const messageContent = message.content.trim();
            
            // B·ªè qua tin nh·∫Øn qu√° ng·∫Øn ho·∫∑c ch·ªâ l√† emoji/commands
            if (messageContent.length < 2 || 
                messageContent.startsWith('/') || 
                messageContent.startsWith('!') ||
                messageContent.startsWith('?') ||
                /^[\s\p{Emoji}\p{Emoji_Modifier}\p{Emoji_Component}\p{Extended_Pictographic}]+$/u.test(messageContent)) {
                return;
            }

            // Ki·ªÉm tra security
            if (!phucx || !phucx.validateCore || !phucx.validateCore()) {
                return;
            }

            // Ki·ªÉm tra user c√≥ trong voice channel kh√¥ng
            const member = message.member;
            if (!member.voice.channel) {
                await message.react('‚ùå');
                const errorEmbed = new EmbedBuilder()
                    .setColor('#FF0000')
                    .setDescription('‚ùå B·∫°n ph·∫£i ·ªü trong voice channel ƒë·ªÉ s·ª≠ d·ª•ng h·ªá th·ªëng nh·∫°c t·∫≠p trung.');
                
                const reply = await message.reply({ embeds: [errorEmbed] });
                setTimeout(() => reply.delete().catch(() => {}), 5000);
                return;
            }

            // N·∫øu c√≥ voice channel ƒë∆∞·ª£c c·∫•u h√¨nh, ki·ªÉm tra user c√≥ ƒë√∫ng channel kh√¥ng
            if (config.voiceChannelId && member.voice.channel.id !== config.voiceChannelId) {
                await message.react('‚ùå');
                const configuredChannel = message.guild.channels.cache.get(config.voiceChannelId);
                const errorEmbed = new EmbedBuilder()
                    .setColor('#FF0000')
                    .setDescription(`‚ùå B·∫°n ph·∫£i ·ªü trong ${configuredChannel} ƒë·ªÉ s·ª≠ d·ª•ng h·ªá th·ªëng nh·∫°c t·∫≠p trung.`);
                
                const reply = await message.reply({ embeds: [errorEmbed] });
                setTimeout(() => reply.delete().catch(() => {}), 5000);
                return;
            }
            
            // N·∫øu kh√¥ng c√≥ voice channel c·∫•u h√¨nh, d√πng voice channel c·ªßa user ho·∫∑c voice channel ƒë√£ setup
            const targetVoiceChannel = config.voiceChannelId ? 
                message.guild.channels.cache.get(config.voiceChannelId) : 
                member.voice.channel;

            // Th√™m reaction "ƒëang x·ª≠ l√Ω"
            await message.react('‚è≥');

            try {
                // L·∫•y ho·∫∑c t·∫°o player
                let player = client.riffy.players.get(serverId);
                
                if (!player) {
                    try {
                        player = await client.riffy.createConnection({
                            guildId: serverId,
                            voiceChannel: targetVoiceChannel.id,
                            textChannel: channelId,
                            deaf: true
                        });
                    } catch (error) {
                        console.error('Error creating player:', error);
                        await message.reactions.removeAll().catch(() => {});
                        await message.react('‚ùå');
                        return;
                    }
                }

                // Resolve track t·ª´ query
                const resolve = await client.riffy.resolve({ 
                    query: messageContent, 
                    requester: message.author 
                });

                if (!resolve || !resolve.tracks || resolve.tracks.length === 0) {
                    await message.reactions.removeAll().catch(() => {});
                    await message.react('‚ùå');
                    
                    const noResultsEmbed = new EmbedBuilder()
                        .setColor('#FF0000')
                        .setDescription('‚ùå Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n.');
                    
                    const reply = await message.reply({ embeds: [noResultsEmbed] });
                    setTimeout(() => reply.delete().catch(() => {}), 5000);
                    return;
                }

                // Th√™m track v√†o queue
                const track = resolve.tracks[0];
                track.requester = {
                    id: message.author.id,
                    username: message.author.username,
                    avatarURL: message.author.displayAvatarURL()
                };

                player.queue.add(track);

                // X√≥a reaction "ƒëang x·ª≠ l√Ω" v√† th√™m reaction th√†nh c√¥ng
                await message.reactions.removeAll().catch(() => {});
                await message.react('‚úÖ');

                // T·∫°o embed th√¥ng b√°o th√¥ng minh
                const trackEmbed = new EmbedBuilder()
                    .setTitle('üéµ B√†i H√°t ƒê√£ ƒê∆∞·ª£c Th√™m')
                    .setDescription(`**${track.info.title}**`)
                    .addFields(
                        {
                            name: 'üé§ Ngh·ªá sƒ©',
                            value: track.info.author || 'Unknown',
                            inline: true
                        },
                        {
                            name: 'üë§ Y√™u c·∫ßu b·ªüi',
                            value: `<@${message.author.id}>`,
                            inline: true
                        },
                        {
                            name: '‚è∞ Th·ªùi l∆∞·ª£ng',
                            value: formatDuration(track.info.length),
                            inline: true
                        },
                        {
                            name: 'üîä √Çm l∆∞·ª£ng',
                            value: `${player.volume || 50}%`,
                            inline: true
                        },
                        {
                            name: 'üé∂ Tr·∫°ng th√°i',
                            value: player.queue.length > 1 ? 
                                `V·ªã tr√≠ trong h√†ng ƒë·ª£i: #${player.queue.length}` : 
                                'üé∂ **ƒêang ph√°t ngay b√¢y gi·ªù!**',
                            inline: false
                        },
                        {
                            name: 'üí° M·∫πo',
                            value: 'üé∂ **Th√≠ch kh√¥ng? G√µ th√™m t√™n b√†i h√°t ƒë·ªÉ ti·∫øp t·ª•c!**',
                            inline: false
                        }
                    )
                    .setColor('#00c3ff')
                    .setFooter({ 
                        text: 'Boo Music Bot - Central System', 
                        iconURL: client.user.displayAvatarURL() 
                    })
                    .setTimestamp();

                if (track.info.artwork) {
                    trackEmbed.setThumbnail(track.info.artwork);
                }

                // G·ª≠i th√¥ng b√°o (t·ª± x√≥a sau 10 gi√¢y)
                const trackMessage = await message.reply({ embeds: [trackEmbed] });
                setTimeout(() => trackMessage.delete().catch(() => {}), 10000);

                // B·∫Øt ƒë·∫ßu ph√°t n·∫øu ch∆∞a ph√°t
                if (!player.playing && !player.paused) {
                    player.play();
                }

            } catch (error) {
                console.error('Error in central music auto-play:', error);
                await message.reactions.removeAll().catch(() => {});
                await message.react('‚ùå');
                
                const errorEmbed = new EmbedBuilder()
                    .setColor('#FF0000')
                    .setDescription('‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu nh·∫°c c·ªßa b·∫°n.');
                
                const reply = await message.reply({ embeds: [errorEmbed] });
                setTimeout(() => reply.delete().catch(() => {}), 5000);
            }

        } catch (error) {
            console.error('Error in centralMusicAutoPlay:', error);
        }
    });
};

// Helper function ƒë·ªÉ format th·ªùi gian
function formatDuration(ms) {
    const seconds = Math.floor(ms / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    
    if (hours > 0) {
        return `${hours}:${(minutes % 60).toString().padStart(2, '0')}:${(seconds % 60).toString().padStart(2, '0')}`;
    } else {
        return `${minutes}:${(seconds % 60).toString().padStart(2, '0')}`;
    }
}

